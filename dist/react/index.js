'use strict';

var react = require('react');

var l=class{audioContext;mediaStreamSource;analyser;mediaRecorder;silenceTimeout;silenceThreshold;silenceDuration;minDecibels;onVolumeChange;onDataAvailable;isSilence;hasSoundStarted;deviceId;isRecording;constructor({onVolumeChange:e,onDataAvailable:t,silenceDuration:a=2500,silentThreshold:s=-50,minDecibels:i=-100,deviceId:r}){this.audioContext=null,this.mediaStreamSource=null,this.analyser=null,this.mediaRecorder=null,this.silenceTimeout=null,this.silenceThreshold=s,this.silenceDuration=a,this.minDecibels=i,this.onVolumeChange=e,this.onDataAvailable=t,this.isSilence=!1,this.hasSoundStarted=!1,this.deviceId=r,this.isRecording=!1;}async startRecording(){if(!this.isRecording)try{let e=await this.getAudioStream();this.setupAudioContext(e),this.setupMediaRecorder(e),this.isRecording=!0,this.checkForSilence();}catch(e){throw console.error("Error getting audio stream: name=%s, message=%s",e.name,e.message),e}}async getAudioStream(){let e=(await this.getAvailableDevices()).filter(a=>a.kind==="audioinput");if(e.length===0)throw new DOMException("No audio input device","NotFoundError");this.deviceId||(e.length===1?this.deviceId=e[0].deviceId:this.deviceId="",navigator.userAgent.indexOf("Chrome")>0&&this.deviceId===""&&(this.deviceId="default"));let t={audio:{deviceId:{exact:this.deviceId}},video:!1};return navigator.mediaDevices.getUserMedia(t)}setupAudioContext(e){this.audioContext=new AudioContext,this.mediaStreamSource=this.audioContext.createMediaStreamSource(e),this.analyser=this.audioContext.createAnalyser(),this.analyser.minDecibels=this.minDecibels,this.mediaStreamSource.connect(this.analyser);}setupMediaRecorder(e){this.mediaRecorder=new MediaRecorder(e),this.mediaRecorder.ondataavailable=t=>{var a;t.data.size>0&&this.hasSoundStarted&&((a=this.onDataAvailable)==null||a.call(this,t.data));},this.mediaRecorder.start();}async getAvailableDevices(){return await navigator.mediaDevices.enumerateDevices()}setDevice(e){this.deviceId!==e&&(this.deviceId=e,this.mediaRecorder&&this.mediaRecorder.state==="recording"&&this.stopRecording());}stopRecording(){this.isRecording&&(this.mediaRecorder&&this.hasSoundStarted&&this.mediaRecorder.state==="recording"?(this.mediaRecorder.requestData(),setTimeout(()=>{this.cleanUp();},100)):this.cleanUp(),this.silenceTimeout&&(clearTimeout(this.silenceTimeout),this.silenceTimeout=null));}cleanUp(){var e,t,a,s,i;((e=this.mediaRecorder)==null?void 0:e.state)==="recording"&&((t=this.mediaRecorder)==null||t.stop()),(s=(a=this.mediaRecorder)==null?void 0:a.stream)==null||s.getTracks().forEach(r=>r.stop()),(i=this.audioContext)==null||i.close(),this.hasSoundStarted=!1,this.isRecording=!1;}checkForSilence(){var s;if(!this.mediaRecorder)throw new Error("MediaRecorder is not available");if(!this.analyser)throw new Error("Analyser is not available");let e=this.analyser.fftSize,t=new Float32Array(e||0);this.analyser.getFloatTimeDomainData(t);let a=this.computeVolume(t);(s=this.onVolumeChange)==null||s.call(this,a),a<this.silenceThreshold?!this.silenceTimeout&&this.mediaRecorder.state!=="inactive"&&(this.silenceTimeout=setTimeout(()=>{var i;(i=this.mediaRecorder)==null||i.stop(),this.isSilence=!0,this.silenceTimeout=null;},this.silenceDuration)):(this.silenceTimeout&&(clearTimeout(this.silenceTimeout),this.silenceTimeout=null),this.isSilence&&this.mediaRecorder.state!=="recording"&&(this.mediaRecorder.start(),this.isSilence=!1),this.hasSoundStarted||(this.hasSoundStarted=!0)),requestAnimationFrame(()=>this.checkForSilence());}computeVolume(e){let t=e.reduce((i,r)=>i+r*r,0),a=Math.sqrt(t/e.length);return 20*Math.log10(a)}},m=l;var A=c=>{let{silenceDuration:e,silentThreshold:t,minDecibels:a,deviceId:s}=c,[i,r]=react.useState(null),[p,h]=react.useState(!1),[n,g]=react.useState(s);react.useEffect(()=>{let o=new m(c);return n&&o.setDevice(n),r(o),()=>{o.stopRecording();}},[e,t,a,n]);let f=react.useCallback(()=>{i==null||i.startRecording(),h(!0);},[i]),R=react.useCallback(()=>{i==null||i.stopRecording(),h(!1);},[i]),S=react.useCallback(o=>{g(o);},[]),b=react.useCallback(async()=>i==null?void 0:i.getAvailableDevices(),[i]);return {startRecording:f,stopRecording:R,setDevice:S,isRecording:p,deviceId:n,getAvailableDevices:b}},v=A;var M=v;

module.exports = M;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=data:application/json;base64,