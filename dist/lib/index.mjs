var o=class{audioContext;mediaStreamSource;analyser;mediaRecorder;silenceTimeout;silenceThreshold;silenceDuration;minDecibels;onVolumeChange;onDataAvailable;isSilence;hasSoundStarted;deviceId;isRecording;constructor({onVolumeChange:e,onDataAvailable:i,silenceDuration:t=2500,silentThreshold:r=-50,minDecibels:a=-100,deviceId:s}){this.audioContext=null,this.mediaStreamSource=null,this.analyser=null,this.mediaRecorder=null,this.silenceTimeout=null,this.silenceThreshold=r,this.silenceDuration=t,this.minDecibels=a,this.onVolumeChange=e,this.onDataAvailable=i,this.isSilence=!1,this.hasSoundStarted=!1,this.deviceId=s,this.isRecording=!1;}async startRecording(){if(!this.isRecording)try{let e=await this.getAudioStream();this.setupAudioContext(e),this.setupMediaRecorder(e),this.isRecording=!0,this.checkForSilence();}catch(e){throw console.error("Error getting audio stream: name=%s, message=%s",e.name,e.message),e}}async getAudioStream(){let e=(await this.getAvailableDevices()).filter(t=>t.kind==="audioinput");if(e.length===0)throw new DOMException("No audio input device","NotFoundError");this.deviceId||(e.length===1?this.deviceId=e[0].deviceId:this.deviceId="",navigator.userAgent.indexOf("Chrome")>0&&this.deviceId===""&&(this.deviceId="default"));let i={audio:{deviceId:{exact:this.deviceId}},video:!1};return navigator.mediaDevices.getUserMedia(i)}setupAudioContext(e){this.audioContext=new AudioContext,this.mediaStreamSource=this.audioContext.createMediaStreamSource(e),this.analyser=this.audioContext.createAnalyser(),this.analyser.minDecibels=this.minDecibels,this.mediaStreamSource.connect(this.analyser);}setupMediaRecorder(e){this.mediaRecorder=new MediaRecorder(e),this.mediaRecorder.ondataavailable=i=>{var t;i.data.size>0&&this.hasSoundStarted&&((t=this.onDataAvailable)==null||t.call(this,i.data));},this.mediaRecorder.start();}async getAvailableDevices(){return await navigator.mediaDevices.enumerateDevices()}setDevice(e){this.deviceId!==e&&(this.deviceId=e,this.mediaRecorder&&this.mediaRecorder.state==="recording"&&this.stopRecording());}stopRecording(){this.isRecording&&(this.mediaRecorder&&this.hasSoundStarted&&this.mediaRecorder.state==="recording"?(this.mediaRecorder.requestData(),setTimeout(()=>{this.cleanUp();},100)):this.cleanUp(),this.silenceTimeout&&(clearTimeout(this.silenceTimeout),this.silenceTimeout=null));}cleanUp(){var e,i,t,r,a;((e=this.mediaRecorder)==null?void 0:e.state)==="recording"&&((i=this.mediaRecorder)==null||i.stop()),(r=(t=this.mediaRecorder)==null?void 0:t.stream)==null||r.getTracks().forEach(s=>s.stop()),(a=this.audioContext)==null||a.close(),this.hasSoundStarted=!1,this.isRecording=!1;}checkForSilence(){var r;if(!this.mediaRecorder)throw new Error("MediaRecorder is not available");if(!this.analyser)throw new Error("Analyser is not available");let e=this.analyser.fftSize,i=new Float32Array(e||0);this.analyser.getFloatTimeDomainData(i);let t=this.computeVolume(i);(r=this.onVolumeChange)==null||r.call(this,t),t<this.silenceThreshold?!this.silenceTimeout&&this.mediaRecorder.state!=="inactive"&&(this.silenceTimeout=setTimeout(()=>{var a;(a=this.mediaRecorder)==null||a.stop(),this.isSilence=!0,this.silenceTimeout=null;},this.silenceDuration)):(this.silenceTimeout&&(clearTimeout(this.silenceTimeout),this.silenceTimeout=null),this.isSilence&&this.mediaRecorder.state!=="recording"&&(this.mediaRecorder.start(),this.isSilence=!1),this.hasSoundStarted||(this.hasSoundStarted=!0)),requestAnimationFrame(()=>this.checkForSilence());}computeVolume(e){let i=e.reduce((a,s)=>a+s*s,0),t=Math.sqrt(i/e.length);return 20*Math.log10(t)}},n=o;var h=n;

export { h as default };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvU2lsZW5jZUF3YXJlUmVjb3JkZXIudHMiLCIuLi8uLi9zcmMvbGliL2luZGV4LnRzIl0sIm5hbWVzIjpbIlNpbGVuY2VBd2FyZVJlY29yZGVyIiwib25Wb2x1bWVDaGFuZ2UiLCJvbkRhdGFBdmFpbGFibGUiLCJzaWxlbmNlRHVyYXRpb24iLCJzaWxlbnRUaHJlc2hvbGQiLCJtaW5EZWNpYmVscyIsImRldmljZUlkIiwic3RyZWFtIiwiZXJyIiwiYXVkaW9JbnB1dERldmljZXMiLCJkZXZpY2UiLCJjb25zdHJhaW50cyIsImV2ZW50IiwiX2EiLCJfYiIsIl9jIiwiX2QiLCJfZSIsInRyYWNrIiwiYnVmZmVyTGVuZ3RoIiwiYW1wbGl0dWRlQXJyYXkiLCJ2b2x1bWUiLCJ2YWx1ZXMiLCJzdW0iLCJ2YWx1ZSIsImF2ZXJhZ2UiLCJTaWxlbmNlQXdhcmVSZWNvcmRlcl9kZWZhdWx0IiwibGliX2RlZmF1bHQiXSwibWFwcGluZ3MiOiJBQWdCQSxJQUFNQSxFQUFOLEtBQTJCLENBQ2pCLGFBRUEsa0JBRUEsU0FFQSxjQUVBLGVBRVMsaUJBRUEsZ0JBRUEsWUFFQSxlQUVBLGdCQUVULFVBRUEsZ0JBRUQsU0FFQSxZQUVQLFlBQVksQ0FDVixlQUFBQyxFQUNBLGdCQUFBQyxFQUNBLGdCQUFBQyxFQUFrQixLQUNsQixnQkFBQUMsRUFBa0IsSUFDbEIsWUFBQUMsRUFBYyxLQUNkLFNBQUFDLENBQ0YsRUFBZ0MsQ0FDOUIsS0FBSyxhQUFlLEtBQ3BCLEtBQUssa0JBQW9CLEtBQ3pCLEtBQUssU0FBVyxLQUNoQixLQUFLLGNBQWdCLEtBQ3JCLEtBQUssZUFBaUIsS0FDdEIsS0FBSyxpQkFBbUJGLEVBQ3hCLEtBQUssZ0JBQWtCRCxFQUN2QixLQUFLLFlBQWNFLEVBQ25CLEtBQUssZUFBaUJKLEVBQ3RCLEtBQUssZ0JBQWtCQyxFQUN2QixLQUFLLFVBQVksR0FDakIsS0FBSyxnQkFBa0IsR0FDdkIsS0FBSyxTQUFXSSxFQUNoQixLQUFLLFlBQWMs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QUFTLFFBQzdCQyxFQUFpQixJQUFJLGFBQWFELEdBQWdCLENBQUMsRUFDekQsS0FBSyxTQUFTLHVCQUF1QkMsQ0FBYyxFQUVuRCxJQUFNQyxFQUFTLEtBQUssY0FBY0QsQ0FBYyxHQUVoRFAsRUFBQSxLQUFLLGlCQUFMLE1BQUFBLEVBQUEsVUFBc0JRLEdBRWxCQSxFQUFTLEtBQUssaUJBQ1osQ0FBQyxLQUFLLGdCQUFrQixLQUFLLGNBQWMsUUFBVSxhQUN2RCxLQUFLLGVBQWlCLFdBQVcsSUFBTSxDQTFNL0MsSUFBQVIsR0EyTVVBLEVBQUEsS0FBSyxnQkFBTCxNQUFBQSxFQUFvQixPQUNwQixLQUFLLFVBQVksR0FDakIsS0FBSyxlQUFpQixJQUN4QixFQUFHLEtBQUssZUFBZSxJQUdyQixLQUFLLGlCQUNQLGFBQWEsS0FBSyxjQUFjLEVBQ2hDLEtBQUssZUFBaUIsTUFFcEIsS0FBSyxXQUFhLEtBQUssY0FBYyxRQUFVLGNBQ2pELEtBQUssY0FBYyxNQUFNLEVBQ3pCLEtBQUssVUFBWSxJQUVkLEtBQUssa0JBQ1IsS0FBSyxnQkFBa0IsS0FJM0Isc0JBQXNCLElBQU0sS0FBSyxnQkFBZ0IsQ0FBQyxDQUNwRCxDQUVRLGNBQWNPLEVBQXNDLENBQzFELElBQU1FLEVBQVNGLEVBQWUsT0FDNUIsQ0FBQ0csRUFBS0MsSUFBVUQsRUFBTUMsRUFBUUEsRUFDOUIsQ0FDRixFQUNNQyxFQUFVLEtBQUssS0FBS0gsRUFBU0YsRUFBZSxNQUFNLEVBRXhELE1BRGUsSUFBSyxLQUFLLE1BQU1LLENBQU8sQ0FFeEMsQ0FDRixFQUVPQyxFQUFRMUIsRUMxT2YsSUFBTzJCLEVBQVFEIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHR5cGUgT25Wb2x1bWVDaGFuZ2UgPSAodm9sdW1lOiBudW1iZXIpID0+IHZvaWQ7XG5leHBvcnQgdHlwZSBPbkRhdGFBdmFpbGFibGUgPSAoZGF0YTogQmxvYikgPT4gdm9pZCB8IHVuZGVmaW5lZDtcblxuZXhwb3J0IGludGVyZmFjZSBTaWxlbmNlQXdhcmVSZWNvcmRlck9wdGlvbnMge1xuICBkZXZpY2VJZD86IHN0cmluZztcbiAgbWluRGVjaWJlbHM/OiBudW1iZXI7XG4gIG9uRGF0YUF2YWlsYWJsZT86IE9uRGF0YUF2YWlsYWJsZTtcblxuICBvblZvbHVtZUNoYW5nZT86IE9uVm9sdW1lQ2hhbmdlO1xuICBzZXREZXZpY2VJZD86IChkZXZpY2VJZDogc3RyaW5nKSA9PiB2b2lkO1xuXG4gIHNpbGVuY2VEdXJhdGlvbj86IG51bWJlcjtcblxuICBzaWxlbnRUaHJlc2hvbGQ/OiBudW1iZXI7XG59XG5cbmNsYXNzIFNpbGVuY2VBd2FyZVJlY29yZGVyIHtcbiAgcHJpdmF0ZSBhdWRpb0NvbnRleHQ6IEF1ZGlvQ29udGV4dCB8IG51bGw7XG5cbiAgcHJpdmF0ZSBtZWRpYVN0cmVhbVNvdXJjZTogTWVkaWFTdHJlYW1BdWRpb1NvdXJjZU5vZGUgfCBudWxsO1xuXG4gIHByaXZhdGUgYW5hbHlzZXI6IEFuYWx5c2VyTm9kZSB8IG51bGw7XG5cbiAgcHJpdmF0ZSBtZWRpYVJlY29yZGVyOiBNZWRpYVJlY29yZGVyIHwgbnVsbDtcblxuICBwcml2YXRlIHNpbGVuY2VUaW1lb3V0OiBSZXR1cm5UeXBlPHR5cGVvZiBzZXRUaW1lb3V0PiB8IG51bGw7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBzaWxlbmNlVGhyZXNob2xkOiBudW1iZXI7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBzaWxlbmNlRHVyYXRpb246IG51bWJlcjtcblxuICBwcml2YXRlIHJlYWRvbmx5IG1pbkRlY2liZWxzOiBudW1iZXI7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBvblZvbHVtZUNoYW5nZT86IE9uVm9sdW1lQ2hhbmdlO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgb25EYXRhQXZhaWxhYmxlPzogT25EYXRhQXZhaWxhYmxlO1xuXG4gIHByaXZhdGUgaXNTaWxlbmNlOiBib29sZWFuO1xuXG4gIHByaXZhdGUgaGFzU291bmRTdGFydGVkOiBib29sZWFuO1xuXG4gIHB1YmxpYyBkZXZpY2VJZDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gIHB1YmxpYyBpc1JlY29yZGluZzogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3Rvcih7XG4gICAgb25Wb2x1bWVDaGFuZ2UsXG4gICAgb25EYXRhQXZhaWxhYmxlLFxuICAgIHNpbGVuY2VEdXJhdGlvbiA9IDI1MDAsXG4gICAgc2lsZW50VGhyZXNob2xkID0gLTUwLFxuICAgIG1pbkRlY2liZWxzID0gLTEwMCxcbiAgICBkZXZpY2VJZCxcbiAgfTogU2lsZW5jZUF3YXJlUmVjb3JkZXJPcHRpb25zKSB7XG4gICAgdGhpcy5hdWRpb0NvbnRleHQgPSBudWxsO1xuICAgIHRoaXMubWVkaWFTdHJlYW1Tb3VyY2UgPSBudWxsO1xuICAgIHRoaXMuYW5hbHlzZXIgPSBudWxsO1xuICAgIHRoaXMubWVkaWFSZWNvcmRlciA9IG51bGw7XG4gICAgdGhpcy5zaWxlbmNlVGltZW91dCA9IG51bGw7XG4gICAgdGhpcy5zaWxlbmNlVGhyZXNob2xkID0gc2lsZW50VGhyZXNob2xkO1xuICAgIHRoaXMuc2lsZW5jZUR1cmF0aW9uID0gc2lsZW5jZUR1cmF0aW9uO1xuICAgIHRoaXMubWluRGVjaWJlbHMgPSBtaW5EZWNpYmVscztcbiAgICB0aGlzLm9uVm9sdW1lQ2hhbmdlID0gb25Wb2x1bWVDaGFuZ2U7XG4gICAgdGhpcy5vbkRhdGFBdmFpbGFibGUgPSBvbkRhdGFBdmFpbGFibGU7XG4gICAgdGhpcy5pc1NpbGVuY2UgPSBmYWxzZTtcbiAgICB0aGlzLmhhc1NvdW5kU3RhcnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuZGV2aWNlSWQgPSBkZXZpY2VJZDtcbiAgICB0aGlzLmlzUmVjb3JkaW5nID0gZmFsc2U7XG4gIH1cblxuICBhc3luYyBzdGFydFJlY29yZGluZygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAodGhpcy5pc1JlY29yZGluZykgcmV0dXJuO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHN0cmVhbSA9IGF3YWl0IHRoaXMuZ2V0QXVkaW9TdHJlYW0oKTtcbiAgICAgIHRoaXMuc2V0dXBBdWRpb0NvbnRleHQoc3RyZWFtKTtcbiAgICAgIHRoaXMuc2V0dXBNZWRpYVJlY29yZGVyKHN0cmVhbSk7XG4gICAgICB0aGlzLmlzUmVjb3JkaW5nID0gdHJ1ZTtcbiAgICAgIHRoaXMuY2hlY2tGb3JTaWxlbmNlKCk7XG4gICAgfSBjYXRjaCAoZXJyOiBhbnkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdldHRpbmcgYXVkaW8gc3RyZWFtOiBuYW1lPSVzLCBtZXNzYWdlPSVzJywgZXJyLm5hbWUsIGVyci5tZXNzYWdlKTtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGdldEF1ZGlvU3RyZWFtKCk6IFByb21pc2U8TWVkaWFTdHJlYW0+IHtcbiAgICBjb25zdCBhdWRpb0lucHV0RGV2aWNlcyA9IChhd2FpdCB0aGlzLmdldEF2YWlsYWJsZURldmljZXMoKSkuZmlsdGVyKChkZXZpY2UpID0+IGRldmljZS5raW5kID09PSAnYXVkaW9pbnB1dCcpO1xuXG4gICAgLy8gdGhyb3cgYW4gZXJyb3IgaWYgdGhlcmUgaXMgbm8gYXVkaW8gaW5wdXQgZGV2aWNlXG4gICAgaWYgKGF1ZGlvSW5wdXREZXZpY2VzLmxlbmd0aCA9PT0gMCkgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbignTm8gYXVkaW8gaW5wdXQgZGV2aWNlJywgJ05vdEZvdW5kRXJyb3InKTtcblxuICAgIC8vIGZpbmQgb3V0IHRoZSBkZWZhdWx0IGRldmljZUlkIHRvIHN0YXJ0IHdpdGhcbiAgICBpZiAoIXRoaXMuZGV2aWNlSWQpIHtcbiAgICAgIC8vIGlmIHRoZXJlIGlzIG9ubHkgb25lIGF1ZGlvIGlucHV0IGRldmljZVxuICAgICAgaWYgKGF1ZGlvSW5wdXREZXZpY2VzLmxlbmd0aCA9PT0gMSkgdGhpcy5kZXZpY2VJZCA9IGF1ZGlvSW5wdXREZXZpY2VzWzBdLmRldmljZUlkO1xuICAgICAgZWxzZSB0aGlzLmRldmljZUlkID0gJyc7XG5cbiAgICAgIC8vIElmIG1pY3JvcGhvbmUgYWNjZXNzIGlzIGRpc2FibGVkIG9uIENocm9tZSwgaXQgZG9lc24ndCBhY2NlcHQgZW1wdHkgc3RyaW5nIGFzIGRldmljZSBuYW1lLCBvciB7IGF1ZGlvOiB0cnVlIH1cbiAgICAgIC8vIGJvdGggd2lsbCB0cmlnZ2VyIGFuIE92ZXJjb25zdHJhaW5lZEVycm9yLiBXZSdkIGxpa2UgYSBOb3RBbGxvd2VkIGVycm9yIGluc3RlYWQuXG4gICAgICBpZiAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUnKSA+IDAgJiYgdGhpcy5kZXZpY2VJZCA9PT0gJycpIHRoaXMuZGV2aWNlSWQgPSAnZGVmYXVsdCc7XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgY29uc3QgY29uc3RyYWludHM6IE1lZGlhU3RyZWFtQ29uc3RyYWludHMgPSB7XG4gICAgICBhdWRpbzoge1xuICAgICAgICBkZXZpY2VJZDoge1xuICAgICAgICAgIGV4YWN0OiB0aGlzLmRldmljZUlkLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHZpZGVvOiBmYWxzZSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzKTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0dXBBdWRpb0NvbnRleHQoc3RyZWFtOiBNZWRpYVN0cmVhbSk6IHZvaWQge1xuICAgIHRoaXMuYXVkaW9Db250ZXh0ID0gbmV3IEF1ZGlvQ29udGV4dCgpO1xuICAgIHRoaXMubWVkaWFTdHJlYW1Tb3VyY2UgPSB0aGlzLmF1ZGlvQ29udGV4dC5jcmVhdGVNZWRpYVN0cmVhbVNvdXJjZShzdHJlYW0pO1xuICAgIHRoaXMuYW5hbHlzZXIgPSB0aGlzLmF1ZGlvQ29udGV4dC5jcmVhdGVBbmFseXNlcigpO1xuICAgIHRoaXMuYW5hbHlzZXIubWluRGVjaWJlbHMgPSB0aGlzLm1pbkRlY2liZWxzO1xuICAgIHRoaXMubWVkaWFTdHJlYW1Tb3VyY2UuY29ubmVjdCh0aGlzLmFuYWx5c2VyKTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0dXBNZWRpYVJlY29yZGVyKHN0cmVhbTogTWVkaWFTdHJlYW0pOiB2b2lkIHtcbiAgICB0aGlzLm1lZGlhUmVjb3JkZXIgPSBuZXcgTWVkaWFSZWNvcmRlcihzdHJlYW0pO1xuXG4gICAgdGhpcy5tZWRpYVJlY29yZGVyLm9uZGF0YWF2YWlsYWJsZSA9IChldmVudCkgPT4ge1xuICAgICAgaWYgKGV2ZW50LmRhdGEuc2l6ZSA+IDAgJiYgdGhpcy5oYXNTb3VuZFN0YXJ0ZWQpIHtcbiAgICAgICAgdGhpcy5vbkRhdGFBdmFpbGFibGU/LihldmVudC5kYXRhKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5tZWRpYVJlY29yZGVyLnN0YXJ0KCk7XG4gIH1cblxuICBhc3luYyBnZXRBdmFpbGFibGVEZXZpY2VzKCk6IFByb21pc2U8TWVkaWFEZXZpY2VJbmZvW10+IHtcbiAgICBjb25zdCBkZXZpY2VzID0gYXdhaXQgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzKCk7XG4gICAgcmV0dXJuIGRldmljZXM7XG4gIH1cblxuICBzZXREZXZpY2UoZGV2aWNlSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmICh0aGlzLmRldmljZUlkICE9PSBkZXZpY2VJZCkge1xuICAgICAgdGhpcy5kZXZpY2VJZCA9IGRldmljZUlkO1xuICAgICAgaWYgKHRoaXMubWVkaWFSZWNvcmRlciAmJiB0aGlzLm1lZGlhUmVjb3JkZXIuc3RhdGUgPT09ICdyZWNvcmRpbmcnKSB7XG4gICAgICAgIC8vIElmIHRoZSByZWNvcmRpbmcgaXMgcnVubmluZywgc3RvcCBpdCBiZWZvcmUgc3dpdGNoaW5nIGRldmljZXNcbiAgICAgICAgdGhpcy5zdG9wUmVjb3JkaW5nKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RvcFJlY29yZGluZygpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuaXNSZWNvcmRpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICB0aGlzLm1lZGlhUmVjb3JkZXIgJiZcbiAgICAgIHRoaXMuaGFzU291bmRTdGFydGVkICYmXG4gICAgICB0aGlzLm1lZGlhUmVjb3JkZXIuc3RhdGUgPT09ICdyZWNvcmRpbmcnXG4gICAgKSB7XG4gICAgICB0aGlzLm1lZGlhUmVjb3JkZXIucmVxdWVzdERhdGEoKTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmNsZWFuVXAoKTtcbiAgICAgIH0sIDEwMCk7IC8vIGFkanVzdCB0aGlzIGRlbGF5IGFzIG5lY2Vzc2FyeVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNsZWFuVXAoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zaWxlbmNlVGltZW91dCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuc2lsZW5jZVRpbWVvdXQpO1xuICAgICAgdGhpcy5zaWxlbmNlVGltZW91dCA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjbGVhblVwKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm1lZGlhUmVjb3JkZXI/LnN0YXRlID09PSAncmVjb3JkaW5nJykge1xuICAgICAgdGhpcy5tZWRpYVJlY29yZGVyPy5zdG9wKCk7XG4gICAgfVxuICAgIHRoaXMubWVkaWFSZWNvcmRlcj8uc3RyZWFtPy5nZXRUcmFja3MoKS5mb3JFYWNoKCh0cmFjaykgPT4gdHJhY2suc3RvcCgpKTtcbiAgICB0aGlzLmF1ZGlvQ29udGV4dD8uY2xvc2UoKTtcbiAgICB0aGlzLmhhc1NvdW5kU3RhcnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuaXNSZWNvcmRpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tGb3JTaWxlbmNlKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5tZWRpYVJlY29yZGVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ01lZGlhUmVjb3JkZXIgaXMgbm90IGF2YWlsYWJsZScpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5hbmFseXNlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBbmFseXNlciBpcyBub3QgYXZhaWxhYmxlJyk7XG4gICAgfVxuXG4gICAgY29uc3QgYnVmZmVyTGVuZ3RoID0gdGhpcy5hbmFseXNlci5mZnRTaXplO1xuICAgIGNvbnN0IGFtcGxpdHVkZUFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXJMZW5ndGggfHwgMCk7XG4gICAgdGhpcy5hbmFseXNlci5nZXRGbG9hdFRpbWVEb21haW5EYXRhKGFtcGxpdHVkZUFycmF5KTtcblxuICAgIGNvbnN0IHZvbHVtZSA9IHRoaXMuY29tcHV0ZVZvbHVtZShhbXBsaXR1ZGVBcnJheSk7XG5cbiAgICB0aGlzLm9uVm9sdW1lQ2hhbmdlPy4odm9sdW1lKTtcblxuICAgIGlmICh2b2x1bWUgPCB0aGlzLnNpbGVuY2VUaHJlc2hvbGQpIHtcbiAgICAgIGlmICghdGhpcy5zaWxlbmNlVGltZW91dCAmJiB0aGlzLm1lZGlhUmVjb3JkZXIuc3RhdGUgIT09ICdpbmFjdGl2ZScpIHtcbiAgICAgICAgdGhpcy5zaWxlbmNlVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMubWVkaWFSZWNvcmRlcj8uc3RvcCgpO1xuICAgICAgICAgIHRoaXMuaXNTaWxlbmNlID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLnNpbGVuY2VUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgfSwgdGhpcy5zaWxlbmNlRHVyYXRpb24pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5zaWxlbmNlVGltZW91dCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5zaWxlbmNlVGltZW91dCk7XG4gICAgICAgIHRoaXMuc2lsZW5jZVRpbWVvdXQgPSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaXNTaWxlbmNlICYmIHRoaXMubWVkaWFSZWNvcmRlci5zdGF0ZSAhPT0gJ3JlY29yZGluZycpIHtcbiAgICAgICAgdGhpcy5tZWRpYVJlY29yZGVyLnN0YXJ0KCk7XG4gICAgICAgIHRoaXMuaXNTaWxlbmNlID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuaGFzU291bmRTdGFydGVkKSB7XG4gICAgICAgIHRoaXMuaGFzU291bmRTdGFydGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy5jaGVja0ZvclNpbGVuY2UoKSk7XG4gIH1cblxuICBwcml2YXRlIGNvbXB1dGVWb2x1bWUoYW1wbGl0dWRlQXJyYXk6IEZsb2F0MzJBcnJheSk6IG51bWJlciB7XG4gICAgY29uc3QgdmFsdWVzID0gYW1wbGl0dWRlQXJyYXkucmVkdWNlKFxuICAgICAgKHN1bSwgdmFsdWUpID0+IHN1bSArIHZhbHVlICogdmFsdWUsXG4gICAgICAwXG4gICAgKTtcbiAgICBjb25zdCBhdmVyYWdlID0gTWF0aC5zcXJ0KHZhbHVlcyAvIGFtcGxpdHVkZUFycmF5Lmxlbmd0aCk7IC8vIGNhbGN1bGF0ZSBybXNcbiAgICBjb25zdCB2b2x1bWUgPSAyMCAqIE1hdGgubG9nMTAoYXZlcmFnZSk7IC8vIGNvbnZlcnQgdG8gZEJcbiAgICByZXR1cm4gdm9sdW1lO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNpbGVuY2VBd2FyZVJlY29yZGVyO1xuIiwiaW1wb3J0IFNpbGVuY2VBd2FyZVJlY29yZGVyIGZyb20gJy4vU2lsZW5jZUF3YXJlUmVjb3JkZXInO1xuXG5leHBvcnQgZGVmYXVsdCBTaWxlbmNlQXdhcmVSZWNvcmRlcjtcbiJdfQ==